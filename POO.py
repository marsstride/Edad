# Ejercicio 1: Crear y escribir en un archivo de texto llamado "mi_diario.txt"

# Paso 1: Definimos el nombre del archivo
nombre_archivo = "mi_diario.txt"

# Paso 2: Usamos 'with open(...)' en modo escritura ('w')
# Esto Crea el archivo si no existe, y lo sobreescribe si ya existe.
with open(nombre_archivo, "w") as diario_file:
    # Paso 3: Escribimos varias l√≠neas en el archivo usando .write()
    diario_file.write("Querido diario,\n")
    diario_file.write("Hoy aprend√≠ sobre archivos en Python.\n")
    diario_file.write("El modo 'w' borra todo antes de escribir. ¬°Qu√© miedo!\n")
    diario_file.write("¬°Pero tambi√©n es muy √∫til para comenzar desde cero!\n")

# Paso 4: Confirmamos que se ha terminado de escribir
print("‚úÖ Diario creado y primeras entradas guardadas.")

# Ejercicio 2: Leer el contenido del diario despu√©s de escribirlo

# Opci√≥n A: Leer todo de golpe (menos recomendada porque no separa l√≠neas bien al mostrar)
# La dejamos comentada como referencia did√°ctica

# with open(nombre_archivo, "r") as diario_file:
#     contenido = diario_file.read()
# print("\n--- Contenido completo del diario (modo A) ---")
# print(contenido)

# Opci√≥n B: Leer l√≠nea por l√≠nea (m√°s clara y controlada)
print("\n--- Contenido del diario (l√≠nea por l√≠nea) ---")
try:
    with open(nombre_archivo, "r") as diario_file:
        for linea in diario_file:
            print(linea.strip())  # .strip() elimina el salto de l√≠nea al final
except FileNotFoundError:
    print(f"‚ùå Error: El archivo '{nombre_archivo}' no existe.")

# Ejercicio 2: Leer el contenido del archivo "mi_diario.txt"
# Probamos dos formas: opci√≥n A (leer todo) y opci√≥n B (leer l√≠nea por l√≠nea)

# ------------------------------
# üîπ Opci√≥n A: Leer todo de golpe
# ------------------------------
# Esta opci√≥n carga todo el contenido del archivo como un solo string
# √ötil si queremos procesar o mostrar todo junto

print("\n--- Contenido completo del diario (modo A - read()) ---")
try:
    with open(nombre_archivo, "r") as diario_file:
        contenido = diario_file.read()  # Lee todo el contenido de una sola vez
    print(contenido)
except FileNotFoundError:
    print(f"‚ùå Error: El archivo '{nombre_archivo}' no existe.")

# -----------------------------------
# üî∏ Opci√≥n B: Leer l√≠nea por l√≠nea
# -----------------------------------
# Esta opci√≥n permite manejar cada l√≠nea por separado
# Ideal para procesar o mostrar contenido ordenado, sin saltos extra

print("\n--- Contenido del diario (modo B - l√≠nea por l√≠nea) ---")
try:
    with open(nombre_archivo, "r") as diario_file:
        for linea in diario_file:
            print(linea.strip())  # Eliminamos los '\n' del final para una impresi√≥n limpia
except FileNotFoundError:
    print(f"‚ùå Error: El archivo '{nombre_archivo}' no existe.")

# Ejercicio 3: A√±adir nuevas entradas al archivo sin borrar lo anterior (modo 'a')

print("\nüìù A√±adiendo nuevas entradas al diario...")

# Abrimos el archivo en modo a√±adir ('a')
with open(nombre_archivo, "a") as diario_file:
    # Escribimos nuevas l√≠neas. Tambi√©n podemos a√±adir una l√≠nea separadora.
    diario_file.write("\n--- Entrada del 20 de Junio de 2025 ---\n")
    diario_file.write("El modo 'a' es genial para no perder datos.\n")
    diario_file.write("Ahora mi diario puede crecer cada d√≠a.\n")

# Confirmamos que se a√±adieron las nuevas entradas
print("‚úÖ Nuevas entradas guardadas.")

# Verificamos que las nuevas entradas se a√±adieron correctamente
print("\nüìñ Verificando el contenido final del diario...")

try:
    with open(nombre_archivo, "r") as diario_file:
        for linea in diario_file:
            print(linea.strip())
except FileNotFoundError:
    print(f"‚ùå Error: El archivo '{nombre_archivo}' no existe.")

# --------------------------------------
# ‚úÖ Ejercicio 1: Crear y escribir diario
# --------------------------------------

# Paso 1: Definimos el nombre del archivo
nombre_archivo = "mi_diario.txt"

# Paso 2: Creamos el archivo desde cero (modo 'w') y escribimos l√≠neas predefinidas
with open(nombre_archivo, "a") as diario_file:
    diario_file.write("Querido diario,\n")
    diario_file.write("Hoy aprend√≠ sobre archivos en Python.\n")
    diario_file.write("El modo 'w' borra todo antes de escribir. ¬°Qu√© miedo!\n")
    diario_file.write("¬°Pero tambi√©n es muy √∫til para comenzar desde cero!\n")

# Confirmamos al usuario
print("‚úÖ Diario creado y primeras entradas guardadas.")

# --------------------------------------
# ‚úÖ Ejercicio 2: Leer el diario (modo A y B)
# --------------------------------------

# Opci√≥n A: Leer todo el contenido de una sola vez
print("\n--- Contenido completo del diario (modo A - read()) ---")
try:
    with open(nombre_archivo, "r") as diario_file:
        contenido = diario_file.read()
    print(contenido)
except FileNotFoundError:
    print(f"‚ùå Error: El archivo '{nombre_archivo}' no existe.")

# Opci√≥n B: Leer el archivo l√≠nea por l√≠nea (m√°s controlado)
print("\n--- Contenido del diario (modo B - l√≠nea por l√≠nea) ---")
try:
    with open(nombre_archivo, "r") as diario_file:
        for linea in diario_file:
            print(linea.strip())  # .strip() elimina los saltos de l√≠nea '\n'
except FileNotFoundError:
    print(f"‚ùå Error: El archivo '{nombre_archivo}' no existe.")

# --------------------------------------
# ‚úÖ Ejercicio 3: A√±adir entrada desde input()
# --------------------------------------

# Aqu√≠ el usuario puede ingresar su propia entrada personalizada
print("\nüìù Vamos a a√±adir una nueva entrada a tu diario.")
print("Escribe tu entrada (usa varias l√≠neas si quieres). Escribe una l√≠nea vac√≠a para terminar.")

# Usamos una lista para recoger m√∫ltiples l√≠neas del usuario
lineas_usuario = []
while True:
    linea = input()
    if linea == "":
        break  # Al ingresar una l√≠nea vac√≠a, se termina la entrada
    lineas_usuario.append(linea)

# A√±adimos las nuevas l√≠neas al diario, en modo 'a' para no borrar lo anterior
print("\n‚úçÔ∏è A√±adiendo tu entrada al diario...")
with open(nombre_archivo, "a") as diario_file:
    diario_file.write("\n--- Nueva entrada personalizada ---\n")
    for linea in lineas_usuario:
        diario_file.write(linea + "\n")

print("‚úÖ ¬°Tu entrada fue a√±adida con √©xito!")

# --------------------------------------
# ‚úÖ Verificaci√≥n final: Leer todo el contenido actualizado
# --------------------------------------

print("\nüìñ Verificando el contenido final del diario (modo B)...")
try:
    with open(nombre_archivo, "r") as diario_file:
        for linea in diario_file:
            print(linea.strip())
except FileNotFoundError:
    print(f"‚ùå Error: El archivo '{nombre_archivo}' no existe.")


class Libro:
    """
    Clase que representa un libro con sus atributos principales.
    """

    def __init__(self, titulo, autor, isbn, paginas):
        """
        Constructor de la clase Libro.

        Args:
            titulo (str): T√≠tulo del libro
            autor (str): Autor del libro
            isbn (str): ISBN del libro
            paginas (int): N√∫mero de p√°ginas del libro
        """
        # Crear los atributos de instancia correspondientes
        self.titulo = titulo
        self.autor = autor
        self.isbn = isbn
        self.paginas = paginas

        # Atributo extra que se inicializa siempre por defecto
        self.disponible = True

    def mostrar_info(self):
        """
        M√©todo que imprime todos los atributos del libro de forma clara y formateada.
        """
        print("=" * 50)
        print("INFORMACI√ìN DEL LIBRO")
        print("=" * 50)
        print(f"T√≠tulo: {self.titulo}")
        print(f"Autor: {self.autor}")
        print(f"ISBN: {self.isbn}")
        print(f"P√°ginas: {self.paginas}")
        print(f"Disponible: {'S√≠' if self.disponible else 'No'}")
        print("=" * 50)


# Ejemplo de uso (no te preocupes por crear objetos todav√≠a, ¬°solo define la clase!)
if __name__ == "__main__":
    # Creaci√≥n de ejemplo para demostrar el funcionamiento
    libro1 = Libro("Cien a√±os de soledad", "Gabriel Garc√≠a M√°rquez", "978-0307474728", 417)
    libro1.mostrar_info()

    # Cambiar disponibilidad
    libro1.disponible = False
    print("\nDespu√©s de cambiar disponibilidad:")
    libro1.mostrar_info()


# Ejercicio 2: Creaci√≥n de instancias y m√©todos de comportamiento

class Libro:
    """
    Clase que representa un libro con sus atributos principales.
    """

    def __init__(self, titulo, autor, isbn, paginas):
        """
        Constructor de la clase Libro.
        """
        self.titulo = titulo
        self.autor = autor
        self.isbn = isbn
        self.paginas = paginas
        self.disponible = True

    def mostrar_info(self):
        """
        M√©todo que imprime todos los atributos del libro de forma clara y formateada.
        """
        print("=" * 50)
        print("INFORMACI√ìN DEL LIBRO")
        print("=" * 50)
        print(f"T√≠tulo: {self.titulo}")
        print(f"Autor: {self.autor}")
        print(f"ISBN: {self.isbn}")
        print(f"P√°ginas: {self.paginas}")
        print(f"Disponible: {'S√≠' if self.disponible else 'No'}")
        print("=" * 50)

    def prestar_libro(self):
        """
        M√©todo para prestar el libro. Cambia disponible a False si est√° disponible.
        """
        if self.disponible == True:
            self.disponible = False
            print(f"El libro '{self.titulo}' ha sido prestado.")
        else:
            print(f"El libro '{self.titulo}' ya est√° prestado.")

    def devolver_libro(self):
        """
        M√©todo para devolver el libro. Cambia disponible a True si estaba prestado.
        """
        if self.disponible == False:
            self.disponible = True
            print(f"El libro '{self.titulo}' ha sido devuelto.")
        else:
            print(f"El libro '{self.titulo}' ya estaba disponible.")


# 1. Definici√≥n de clase Libro (arriba) ‚úì

# 2. Crear dos objetos Libro diferentes
libro1 = Libro("El Principito", "Antoine de Saint-Exup√©ry", "978-3-14-046401-7", 120)
libro2 = Libro("Raza de Bronce", "Alcides Arguedas", "978-99905-2-213-9", 250)

# 3. Acceder y mostrar algunos de sus atributos directamente
print(f"\nEl autor del primer libro es: {libro1.autor}")
print(f"El ISBN del segundo libro es: {libro2.isbn}")

# 4. Llamar al m√©todo mostrar_info() para cada uno de los objetos
print("\n--- Mostrando informaci√≥n completa ---")
libro1.mostrar_info()
libro2.mostrar_info()

# 5. A√±adir m√©todos de comportamiento (ya implementados arriba) ‚úì

# 6. Prueba los nuevos m√©todos con tus objetos libro1 y libro2
print("\n--- Probando m√©todos de comportamiento ---")

# Prestar libro1
libro1.prestar_libro()

# Intentar prestar libro1 otra vez (ya prestado)
libro1.prestar_libro()

# Devolver libro1
libro1.devolver_libro()

# Intentar devolver libro1 otra vez (ya disponible)
libro1.devolver_libro()

print("\n--- Probando con libro2 ---")

# Prestar libro2
libro2.prestar_libro()

# Devolver libro2
libro2.devolver_libro()

print("\n--- Estado final de los libros ---")
libro1.mostrar_info()
libro2.mostrar_info()


class Libro:
  """
  Clase que representa un libro con sus atributos principales.
  """

  def __init__(self, titulo, autor, isbn, paginas):
      """
      Constructor de la clase Libro.

      Args:
          titulo (str): T√≠tulo del libro
          autor (str): Autor del libro
          isbn (str): ISBN del libro
          paginas (int): N√∫mero de p√°ginas del libro
      """
      self.titulo = titulo
      self.autor = autor
      self.isbn = isbn
      self.paginas = paginas
      self.disponible = True

  def mostrar_info(self):
      """
      M√©todo que imprime todos los atributos del libro de forma clara y formateada.
      """
      print("=" * 50)
      print("INFORMACI√ìN DEL LIBRO")
      print("=" * 50)
      print(f"T√≠tulo: {self.titulo}")
      print(f"Autor: {self.autor}")
      print(f"ISBN: {self.isbn}")
      print(f"P√°ginas: {self.paginas}")
      print(f"Disponible: {'S√≠' if self.disponible else 'No'}")
      print("=" * 50)


if __name__ == "__main__":
  # Crear objetos de tipo Libro
  libro1 = Libro("Cien a√±os de soledad", "Gabriel Garc√≠a M√°rquez", "978-0307474728", 417)
  libro2 = Libro("1984", "George Orwell", "978-0451524935", 328)
  libro3 = Libro("El Principito", "Antoine de Saint-Exup√©ry", "978-0156013987", 96)

  # Crear una lista vac√≠a
  mi_biblioteca = []

  # A√±adir libros a la lista
  mi_biblioteca.append(libro1)
  mi_biblioteca.append(libro2)
  mi_biblioteca.append(libro3)

  # Mostrar el inventario completo
  print("\n\n--- INVENTARIO COMPLETO DE LA BIBLIOTECA ---")
  for libro_actual in mi_biblioteca:
      libro_actual.mostrar_info()
      print("=" * 20)  # Separador
